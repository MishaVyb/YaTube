import os

from django.db.models import QuerySet
from django.http import HttpResponse
from django.shortcuts import redirect, render, get_object_or_404
from django.core.paginator import Paginator
from django.contrib.auth import decorators, get_user_model
from django.core.handlers.wsgi import WSGIRequest
from django.views.decorators.cache import cache_page

from yatube import settings
from .forms import CommentForm, PostForm
from .models import Follow, Group, Post

app_name = 'posts'
User = get_user_model()


@cache_page(settings.CACHE_TIME_DEFAULT, key_prefix='index_page')
def index(request: WSGIRequest) -> HttpResponse:
    template: str = os.path.join(app_name, 'index.html')
    posts: QuerySet = Post.objects.select_related('group', 'author')
    page_num: int = request.GET.get('page')
    page_obj = Paginator(posts, settings.POSTS_PER_PAGE).get_page(page_num)

    context = {'page_obj': page_obj}
    return render(request, template, context)


@decorators.login_required
def follow_index(request: WSGIRequest) -> HttpResponse:
    """View-function for page that shows posts by author which user following
    for. Actions:

    1- user.follower.all() -- обратимся ок всем записям в таблице Follow,
    где наш user указан как follower (то есть тот, кто подписался на кого-либо)
    2- user.follower.all().author -- получить из наших обьектов модели Follow
    автора, то есть того, на кого наш user подписан.
    3- пройдемся по всем выбранным обьектам модели Follow, и добавим f.author в
    follower_author_list -- список, в котором хранятся все авторы на которых
    подписан наш User.
    4- Создадим запрос к модели Post, оставим авторов, которые входят в список
    тех, на кого наш user подписан.
    """
    template: str = os.path.join(app_name, 'follow.html')

    follower_author_list: list[User] = [
        f.author for f in request.user.follower.all()
    ]
    posts: QuerySet = Post.objects.select_related('group', 'author').filter(
        author__in=follower_author_list
    )

    page_num: int = request.GET.get('page')
    page_obj = Paginator(posts, settings.POSTS_PER_PAGE).get_page(page_num)

    context = {'page_obj': page_obj}
    return render(request, template, context)


@decorators.login_required
def post_create(request: WSGIRequest) -> HttpResponse:
    template = os.path.join(app_name, 'create_post.html')
    form = PostForm(data=request.POST or None, files=request.FILES or None)
    if request.method == 'POST':
        if form.is_valid():
            post: Post = form.save(commit=False)
            post.author = request.user
            post.save()
            return redirect(
                'posts:profile', username=request.user.get_username()
            )
    context = {'is_edit': False, 'form': form}
    return render(request, template, context)


def post_detail(request: WSGIRequest, post_id: int) -> HttpResponse:
    template = os.path.join(app_name, 'post_detail.html')
    post: Post = get_object_or_404(Post, pk=post_id)
    form = CommentForm(data=request.POST or None)
    context = {'post': post, 'comments': post.comments.all(), 'form': form}
    return render(request, template, context)


@decorators.login_required
def add_comment(request: WSGIRequest, post_id: int) -> HttpResponse:
    """View is handling POST request generated by action url form create
    comment form.
    """
    assert request.method == 'POST'
    post = get_object_or_404(Post, pk=post_id)
    form = CommentForm(data=request.POST or None)
    if form.is_valid():
        comment = form.save(commit=False)
        comment.author = request.user
        comment.post = post
        comment.save()
        return redirect('posts:post_detail', post_id=post_id)
    else:
        return post_detail(request, post_id)


@decorators.login_required
def post_edit(request: WSGIRequest, post_id: int) -> HttpResponse:

    template = os.path.join(app_name, 'create_post.html')
    post = get_object_or_404(Post, pk=post_id)
    form = PostForm(
        data=request.POST or None, files=request.FILES or None, instance=post
    )

    if not request.user == post.author:
        return redirect('posts:post_detail', post_id=post_id)
    if request.POST and form.is_valid():
        post.save()
        return redirect('posts:post_detail', post_id=post_id)

    context = {'is_edit': True, 'form': form}
    return render(request, template, context)


def profile(request: WSGIRequest, username: str) -> HttpResponse:
    template: str = os.path.join(app_name, 'profile.html')
    author_profile: User = get_object_or_404(User, username=username)
    page_num: int = request.GET.get('page')
    posts = Post.objects.select_related('author').filter(author=author_profile)
    page_obj = Paginator(posts, settings.POSTS_PER_PAGE).get_page(page_num)

    following = (
        request.user.is_authenticated
        and Follow.objects.filter(
            user=request.user, author=author_profile
        ).exists()
    )

    context = {
        'profile': author_profile,
        'page_obj': page_obj,
        'following': following,
    }
    return render(request, template, context)


@decorators.login_required
def profile_follow(request: WSGIRequest, username: str) -> HttpResponse:
    """Подписаться на автора"""
    author_profile: User = get_object_or_404(User, username=username)
    if request.user != author_profile:
        Follow.objects.get_or_create(user=request.user, author=author_profile)

    return redirect('posts:profile', username=username)


@decorators.login_required
def profile_unfollow(request: WSGIRequest, username: str) -> HttpResponse:
    """Дизлайк, отписка"""
    author_profile: User = get_object_or_404(User, username=username)
    deleted = Follow.objects.filter(
        user=request.user, author=author_profile
    ).delete()

    if deleted[0] > 1 or deleted[1]['posts.Follow'] > 1:
        raise RuntimeError(
            f'Follow model contains more then 1 equal instances. '
            f'Deleted objects: {deleted}. '
            f'request user: {request.user}. '
            f'author profile: {author_profile}. '
        )

    return redirect('posts:profile', username=username)


def group_posts(request: WSGIRequest, slug: str):
    template = os.path.join(app_name, 'group_list.html')
    group = get_object_or_404(Group, slug=slug)
    page_num: int = request.GET.get('page')
    posts = Post.objects.select_related('group').filter(group=group)
    page_obj = Paginator(posts, settings.POSTS_PER_PAGE).get_page(page_num)

    context = {'group': group, 'page_obj': page_obj}
    return render(request, template, context)
